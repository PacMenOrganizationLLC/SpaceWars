@using SpaceWars.Logic
@inject IJSRuntime JSRuntime
@using System.IO

<svg width="@_game.Map.BoardWidth" height="@_game.Map.BoardHeight" style="position: relative; border:1px solid black;">
    @foreach (var player in _game.GetOtherPlayers(_currentPlayer))
    {
        <ShipSprite Player="player"
                    X="@GetRelativeX(player.Ship.Location.X)"
                    Y="@GetRelativeY(player.Ship.Location.Y)"
                    Heading="@GetRelativeHeading(player.Ship.Heading)"
                    Map="_game.Map" />
    }
    <ShipSprite Player="@_currentPlayer"
                X="@(SvgWidth / 2)"
                Y="@(SvgHeight / 2)"
                Heading="0"
                Map="@_game.Map" />
</svg>

@code {
    private Game _game;
    private Player _currentPlayer;
    private const int SvgWidth = 2000;
    private const int SvgHeight = 2000;
    private Random _random = new Random();

    [Parameter, EditorRequired]
    public Game Game
    {
        get => _game;
        set
        {
            if (_game != value)
            {
                _game = value;
                StateHasChanged();
            }
        }
    }

    [Parameter, EditorRequired]
    public Player CurrentPlayer
    {
        get => _currentPlayer;
        set
        {
            if (_currentPlayer != value)
            {
                _currentPlayer = value;
                StateHasChanged();
            }
        }
    }

    private string GetShipSvg()
    {
        int shipNumber = _random.Next(1, 19);
        return $"Ships/svg/{shipNumber}.svg";
    }

    private int GetRelativeX(int x)
    {
        return x - _currentPlayer.Ship.Location.X + SvgWidth / 2;
    }

    private int GetRelativeY(int y)
    {
        return y - _currentPlayer.Ship.Location.Y + SvgHeight / 2;
    }

    private int GetRelativeHeading(int heading)
    {
        int relativeHeading = heading - _currentPlayer.Ship.Heading;
        if (relativeHeading < 0) relativeHeading += 360;
        return relativeHeading;
    }
}


