@using SpaceWars.Logic
@inject IJSRuntime JSRuntime
@using System.IO

<div class="position-relative">
    <div style="width: 800px; height: 800px; overflow: hidden;"  class="border border-3 rounded-circle position-relative">
        @foreach (var player in _game.GetOtherPlayers(_currentPlayer))
        {
            <ShipSprite Player="player"
                        X="@GetZoomedRelativeX(player.Ship.Location.X)"
                        Y="@GetZoomedRelativeY(player.Ship.Location.Y)"
                        Heading="@GetRelativeHeading(player.Ship.Heading)"
                        Map="_game.Map" />
        }
        <ShipSprite Player="@_currentPlayer"
                    X="400"
                    Y="400"
                    Heading="0"
                    Map="@_game.Map" />
    </div>
</div>

@code {
    private Game _game;
    private Player _currentPlayer;
    private Random _random = new Random();

    [Parameter, EditorRequired]
    public Game Game
    {
        get => _game;
        set
        {
            if (_game != value)
            {
                _game = value;
                StateHasChanged();
            }
        }
    }

    [Parameter, EditorRequired]
    public Player CurrentPlayer
    {
        get => _currentPlayer;
        set
        {
            if (_currentPlayer != value)
            {
                _currentPlayer = value;
                StateHasChanged();
            }
        }
    }

    private string GetViewBox()
    {
        int viewBoxSize = 200; 
        int halfViewBoxSize = viewBoxSize / 2;
        int minX = _currentPlayer.Ship.Location.X - halfViewBoxSize;
        int minY = _currentPlayer.Ship.Location.Y - halfViewBoxSize;

        return $"{minX} {minY} {viewBoxSize} {viewBoxSize}";
    }

    private int GetZoomedRelativeX(int x)
    {
        int scale = 5;
        return (x * scale - (_currentPlayer.Ship.Location.X * scale) + 400);
    }

    private int GetZoomedRelativeY(int y)
    {
        int scale = 5;
        return (y * scale - (_currentPlayer.Ship.Location.Y * scale) + 400); 
    }
  
    private int GetRelativeHeading(int heading)
    {
        int relativeHeading = heading - _currentPlayer.Ship.Heading;
        if (relativeHeading < 0) relativeHeading += 360;
        return relativeHeading;
    }

  }


