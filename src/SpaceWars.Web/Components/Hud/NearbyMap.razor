@using SpaceWars.Logic
@inject IJSRuntime JSRuntime
@using System.IO

<div class="position-relative" style="display: flex; justify-content: center; align-items: center; z-index:-1;">
    <div style="width: @(size)px; height: @(size)px; min-width:@(size)px; overflow: hidden;"  class="border rounded-circle position-relative bg-dark">
        @foreach (var player in _game.GetOtherPlayers(_currentPlayer))
        {
            <ShipSprite Player="player"
                        X="@(GetZoomedRelativeX(player.Ship.Location.X, player.Ship.Location.Y))"
                        Y="@(GetZoomedRelativeY(player.Ship.Location.X, player.Ship.Location.Y))"
                        Heading="@GetRelativeHeading(player.Ship.Heading)"
                        Map="_game.Map" />
        }
        <ShipSprite Player="@_currentPlayer"
                    X="400"
                    Y="400"
                    Heading="0"
                    Map="@_game.Map" />
    </div>
</div>

@code {
    private Game _game;
    private Player _currentPlayer;
    private Random _random = new Random();
    private int size = 800;
    private int zoomScale = 2;

    [Parameter, EditorRequired]
    public Game Game
    {
        get => _game;
        set
        {
            if (_game != value)
            {
                _game = value;
                StateHasChanged();
            }
        }
    }

    [Parameter, EditorRequired]
    public Player CurrentPlayer
    {
        get => _currentPlayer;
        set
        {
            if (_currentPlayer != value)
            {
                _currentPlayer = value;
                StateHasChanged();
            }
        }
    }

    private (int X, int Y) GetRotatedPosition(int otherX, int otherY, int centerX, int centerY, int heading)
    {
        // Translate points to make the center ship the origin
        double translatedX = otherX - centerX;
        double translatedY = otherY - centerY;

        // Convert heading to radians and rotate
        double radians = (Math.PI / 180) * heading;
        double cosAngle = Math.Cos(radians);
        double sinAngle = Math.Sin(radians);

        // Apply rotation
        double rotatedX = -translatedX * cosAngle + translatedY * sinAngle;
        double rotatedY = -translatedX * sinAngle - translatedY * cosAngle;

        // Translate back and apply zoomScale
        rotatedX = rotatedX * zoomScale + size / 2;
        rotatedY = rotatedY * zoomScale + size / 2;

        return ((int)rotatedX, (int)rotatedY);
    }

    private int GetZoomedRelativeX(int otherX, int otherY)
    {
        var (rotatedX, _) = GetRotatedPosition(otherX, otherY, _currentPlayer.Ship.Location.X, _currentPlayer.Ship.Location.Y, _currentPlayer.Ship.Heading);
        return rotatedX;
    }

    private int GetZoomedRelativeY(int otherX, int otherY)
    {
        var (_, rotatedY) = GetRotatedPosition(otherX, otherY, _currentPlayer.Ship.Location.X, _currentPlayer.Ship.Location.Y, _currentPlayer.Ship.Heading);
        return rotatedY;
    }
  
    private int GetRelativeHeading(int heading)
    {
        int relativeHeading = heading - _currentPlayer.Ship.Heading;
        if (relativeHeading < 0) relativeHeading += 360;
        return relativeHeading;
    }

  }


