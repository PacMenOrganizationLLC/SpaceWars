@using SpaceWars.Logic
@inject IJSRuntime JSRuntime
@using System.IO

<div class="position-relative">
    <div style="width: @(size)px; height: @(size)px; overflow: hidden;"  class="border rounded-circle position-relative bg-dark">
            @foreach (var player in _game.GetOtherPlayers(_currentPlayer))
            {
                <ShipSprite Player="player"
                            X="@GetZoomedRelativeX(player.Ship.Location.X)"
                            Y="@GetZoomedRelativeY(player.Ship.Location.Y)"
                            Heading="@GetRelativeHeading(player.Ship.Heading)"
                            Map="_game.Map" />
            }
            <ShipSprite Player="@_currentPlayer"
                        X="300"
                        Y="300"
                        Heading="0"
                        Map="@_game.Map" />

            <!-- Uncomment this to see a center dot to center the ship -->
           @* <div style="position: absolute; top: 300px; left: 300px;  transform: translate(-50%, -50%); width: 10px; height: 10px; background-color: red;"></div> *@
        </div>
</div>

@code {
    private Game _game;
    private Player _currentPlayer;
    private Random _random = new Random();
    private int size = 700;
    private int zoomScale = 2;

    [Parameter, EditorRequired]
    public Game Game
    {
        get => _game;
        set
        {
            if (_game != value)
            {
                _game = value;
                StateHasChanged();
            }
        }
    }

    [Parameter, EditorRequired]
    public Player CurrentPlayer
    {
        get => _currentPlayer;
        set
        {
            if (_currentPlayer != value)
            {
                _currentPlayer = value;
                StateHasChanged();
            }
        }
    }

    private int GetZoomedRelativeX(int x)
    {
        return (x * zoomScale - (_currentPlayer.Ship.Location.X * zoomScale) + size/2);
    }

    private int GetZoomedRelativeY(int y)
    {
        return (y * zoomScale - (_currentPlayer.Ship.Location.Y * zoomScale) + size/2); 
    }
  
    private int GetRelativeHeading(int heading)
    {
        int relativeHeading = heading - _currentPlayer.Ship.Heading;
        if (relativeHeading < 0) relativeHeading += 360;
        return relativeHeading;
    }

  }


