@page "/hud"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.WebUtilities
@using SpaceWars.Logic
@using SpaceWars.Logic.Actions
@using SpaceWars.Logic.Weapons
@using SpaceWars.Web.Components.Hud
@inject NavigationManager NavigationManager
@inject Game Game

<PageTitle>Space Wars | HUD</PageTitle>
@if (!IsValidToken && Player == null)
{
        <div style="text-align: center; display: flex; flex-direction: column; justify-content: center; align-items: center; height: 80vh;">
            <h2>Player HUD</h2>
            <EditForm Model="TokenModel" OnValidSubmit="VerifyProvidedToken" FormName="tokeForm">
                <div class="form-group">
                <InputText class="mb-2" @bind-Value="TokenModel.TokenValue" placeholder="Enter a token"/>
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
}
else if (Player == null)
{
    <h1>Player not found</h1>
}
else
{
    <div class="row">
        <div class="col-12 col-xl-3">
            <div class="mb-2">
                <ShipStatus Ship="@Player?.Ship" />
            </div>
            <div class="mb-2">
                <ShipResources Ship="@Player?.Ship" />
            </div>
            <div class="mb-2">
                <PlayerActionQueue Player="Player" />
            </div>
            <button class="btn btn-primary" @onclick="JoinTestPlayers">Join Test Players</button>
        </div>
        <div class="col-12 col-xl-6">
            <NearbyMap Game="@Game" CurrentPlayer="@Player" />
        </div>
        <div class="col-12 col-xl-3">
            <ShopView Game="@Game" />
            <PlayerMessages Messages="Player?.ReadMessages().ToList()" />
        </div>
    </div>
}

@code {
    public Player? Player;
    [SupplyParameterFromForm]
    public PlayerTokenModel TokenModel { get; set; } = new PlayerTokenModel();
    public PlayerToken? PlayerToken = null;
    public bool IsValidToken = false;

    protected override void OnInitialized()
    {
        GetPlayer();
        Game.Ticked += GameTicked;
    }

    public void GameTicked(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void VerifyProvidedToken()
    {
        Player? player = null;
        try
        {
            // var playerToken = new PlayerToken(TokenModel.TokenValue); umcomment this line to use the token from the form
            var gameRes= Game.Join("ME"); // this is to hot wire the game so we can test the UI Just click submit
            var playerToken = gameRes.Token;
            player = Game.GetPlayerByToken(playerToken);

            if (player != null)
            {
                Player = player;
                IsValidToken = true;
                Game.EnqueueAction(playerToken, new MoveForwardAction(10));
                Game.EnqueueAction(playerToken, new MoveForwardAction(20));
                Game.EnqueueAction(playerToken, new MoveForwardAction(30));
                Game.EnqueueAction(playerToken, new MoveForwardAction(40));
                Game.EnqueueAction(playerToken, new MoveForwardAction(50));
                Game.EnqueueAction(playerToken, new MoveForwardAction(60));
                Game.EnqueueAction(playerToken, new MoveForwardAction(70));
                Game.EnqueueAction(playerToken, new MoveForwardAction(80));
                Game.EnqueueAction(playerToken, new MoveForwardAction(90));
                Game.EnqueueAction(playerToken, new MoveForwardAction(100));
                Game.EnqueueAction(playerToken, new FireWeaponAction("Basic Cannon"));
                Game.EnqueueAction(playerToken, new PurchaseAction("Basic Cannon"));
            }
            else
            {
                IsValidToken = false;
            }
        }
        catch (KeyNotFoundException)
        {
            IsValidToken = false;
        }
    }

    private void GetPlayer()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        PlayerToken = null;


        if (query.TryGetValue("token", out var token))
        {
            if (string.IsNullOrWhiteSpace(token))
            {
                throw new Exception("Token is empty");
            }
            PlayerToken = new PlayerToken(token!);
        }

        if (PlayerToken == null)
        {
            return;
        }

        try
        {
            Player = Game.GetPlayerByToken(PlayerToken);
        }
        catch (KeyNotFoundException)
        {
            Player = null;
        }
    }

    public void JoinTestPlayers()
    {
        for (int i = 0; i < 10; i++)
        {
            Game.Join($"Test Player {i}");
        }
    }

    public class PlayerTokenModel
    {
        public string TokenValue { get; set; }
    }

}
