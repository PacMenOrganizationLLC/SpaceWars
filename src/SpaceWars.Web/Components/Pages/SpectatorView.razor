@page "/spectatorview"
@rendermode InteractiveServer
@using SpaceWars.Logic
@using SpaceWars.Web.Components.Layout;
@using SpaceWars.Web.Components.SpectatorView;
@inject Game Game
@layout SpectatorViewLayout


<div class="d-flex flex-column bg-dark h-100 w-100 map-border">
    <div class="flex-grow-1 bg-dark text-dark map">
        @foreach (var player in Players)
        {
            <Ship Player=@player Map=@Map />
        }
    </div>
    <div class="border border-3 rounded text-light scoreboard border-success bg-dark"
        style="position: fixed; top: 10px; right: 10px; width: 15em; height: 70ex;">
        <div class="fs-5 text-center fw-bold">Scoreboard</div>
        <div class="list-group">
            @foreach (var player in Players)
            {
                <div class="list-group-item bg-dark">
                    <div class="row text-white">
                        <div class="col fw-bold">@player.Name</div>
                        <div class="col-auto fw-bold">@CalculateScore(player)</div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


<style>
    .ship {
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .map-border {
        padding: 50px;
    }

    .map {
        position: relative;
    }

    .scoreboard {
        opacity: 0.5;
    }

    .scoreboard:hover {
        opacity: 1;
    }
</style>

@code {
    public IEnumerable<Player>? Players => Game.Map?.Players;
    public GameMap? Map;

    protected override void OnInitialized()
    {
        Map = Game.Map;
        Game.Ticked += GameTicked;
    }

    public void GameTicked(object? sender, EventArgs e)
    {   
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public int CalculateScore(Player player)
    {
        return player.Ship.Health + player.Ship.Shield;
    }
}
